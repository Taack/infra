if (rootProject.name == 'infra' || rootProject.name == 'taack-ui-test') {
    apply plugin: "org.grails.grails-plugin"

    if (rootProject.name == 'taack-ui-test') {
        apply plugin: 'java-library'

        repositories {
            mavenCentral()
            maven { url "https://repo.grails.org/grails/core/" }
        }
    } else {
        apply plugin: "idea"
        apply plugin: "asset-pipeline"
        apply plugin: "org.grails.grails-gsp"
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        developmentOnly("org.springframework.boot:spring-boot-devtools")
        compileOnly "io.micronaut:micronaut-inject-groovy"
        implementation "org.springframework.boot:spring-boot-starter-logging"
        implementation "org.springframework.boot:spring-boot-starter-validation"
        implementation "org.springframework.boot:spring-boot-autoconfigure"
        implementation "org.grails:grails-core"
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.springframework.boot:spring-boot-starter-tomcat"
        implementation "org.grails:grails-web-boot"
        implementation "org.grails:grails-logging"
        implementation "org.grails:grails-plugin-databinding"
        implementation "org.grails:grails-plugin-i18n"
        implementation "org.grails:grails-plugin-services"
        implementation "org.grails.plugins:gsp"
        profile "org.grails.profiles:web-plugin"
        runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipeline}"
    }

    if (rootProject.name == 'infra') {
        bootRun {
            ignoreExitValue true
            jvmArgs(
                    '-Dspring.output.ansi.enabled=always',
                    '-noverify',
                    '-XX:TieredStopAtLevel=1',
                    '-Xmx1024m')
            sourceResources sourceSets.main
            String springProfilesActive = 'spring.profiles.active'
            systemProperty springProfilesActive, System.getProperty(springProfilesActive)
        }
        tasks.withType(GroovyCompile) {
            configure(groovyOptions) {
                forkOptions.jvmArgs = ['-Xmx1024m']
            }
        }

        tasks.withType(Test) {
            useJUnitPlatform()
        }
    } else
        bootJar.enabled = false
}

dependencies {
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation "com.openhtmltopdf:openhtmltopdf-core:${openhtmlVersion}"
    implementation "com.openhtmltopdf:openhtmltopdf-pdfbox:${openhtmlVersion}"
    implementation "com.openhtmltopdf:openhtmltopdf-svg-support:${openhtmlVersion}"

    implementation "org.grails:grails-plugin-controllers"

    implementation "org.grails.plugins:hibernate5"
    implementation "org.grails.plugins:spring-security-core:${grailsSpringSecurity}"
    implementation "org.grails:grails-plugin-interceptors"

    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'

    api "org.apache.solr:solr-solrj:${solrj}"
    api "org.apache.tika:tika-core:${tika}"
    api "org.apache.tika:tika-parsers-standard:${tika}"
    api "org.apache.tika:tika-parser-ocr-module:${tika}"
    api "org.apache.tika:tika-parser-html-module:${tika}"

    implementation 'net.i2p.crypto:eddsa:0.3.0'
    implementation "org.apache.sshd:sshd:${minaSshd}"
    implementation "org.apache.sshd:sshd-core:${minaSshd}"
    implementation "org.apache.sshd:sshd-common:${minaSshd}"
    implementation "org.apache.sshd:sshd-sftp:${minaSshd}"
    implementation "org.apache.sshd:sshd-git:${minaSshd}"
    implementation "org.apache.sshd:sshd-cli:${minaSshd}"

    if (rootProject.name != 'infra' && rootProject.name != 'taack-ui-test') {
        implementation project(':infra:taack-jdbc-common')
    } else {
        implementation project(':taack-jdbc-common')
    }
}

if (rootProject.name != 'infra') {
    grails {
        // should use gradle -Dgrails.run.active=true bootRun
        exploded = true
        plugins {
        }
    }
} else {
    assets {
        minifyJs = true
        minifyCss = true
        configOptions = [
                commonJs: false,
                babel   : [
                        enabled       : false,
                        processJsFiles: false
                ]
        ] //useful for custom config on extension libraries

        excludes = ['reveal.js/plugin/*/plugin.js', '**/*esm*']

        //for plugin packaging
        packagePlugin = true //set to true if this is a library

        //developmentRuntime can be turned off
        developmentRuntime = false

        //if you want to customize the jar task this task runs on you can specify a jarTaskName
        jarTaskName = null
    }

}

