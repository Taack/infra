import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

import java.time.Duration

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/restricted" }

    }
    dependencies {
        classpath platform("org.apache.grails:grails-bom:$grailsVersion")
        classpath "org.apache.grails:grails-gradle-plugins"
        classpath "org.apache.grails:grails-data-hibernate5"
        classpath "cloud.wondrify:asset-pipeline-gradle"
        classpath 'com.netflix.nebula:gradle-lint-plugin:20.6.2'
    }
}

apply plugin: 'nebula.lint'

gradleLint {
    rules=['unused-dependency']
}

ext.projectVersion = taackReleaseVersion
ext.releaseVersion = taackReleaseVersion
ext.isReleaseVersion = { -> !releaseVersion.endsWith('SNAPSHOT') }

//if (isReleaseVersion()) {
//    version releaseVersion
//    group "org.taack"
//
//    ext."signing.keyId" = System.getenv("SIGNING_KEY") ?: project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : null
//    ext."signing.password" = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signing.password") ? project.getProperty('signing.password') : null
//    ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : null
//
//    apply plugin: 'io.github.gradle-nexus.publish-plugin'
//
//    nexusPublishing {
//        repositories {
//            sonatype {
//                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
//                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
//                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
//                nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
//                snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
//                username = ossUser
//                password = ossPass
//                stagingProfileId = ossStagingProfileId
//            }
//        }
//
//        transitionCheckOptions {
//            maxRetries.set(40)
//            delayBetween.set(Duration.ofMillis(2000))
//        }
//    }
//
//

def publishedProjects = [
        'taack-ui',
        'taack-ui-ssh',
        'taack-ui-pdf',
        'taack-ui-asciidoc',
        'taack-ui-search',
        'taack-jdbc-common',
        'taack-ui-jdbc',
]

subprojects {

    if (name in publishedProjects) {
        version releaseVersion
        group "org.taack"

        apply plugin: 'maven-publish'
        apply plugin: 'signing'
        apply plugin: 'java'
        apply plugin: 'java-library'

        repositories {
            mavenLocal()
            mavenCentral()
            maven { url "https://repo.grails.org/grails/core" }

        }

        apply plugin: 'nebula.lint'

        publishing {
            publications {
                maven(MavenPublication) {
                    from components.java
                }
            }
        }
        if (isReleaseVersion()) {
            println "isReleaseVersion() ${isReleaseVersion()}"
            println "isReleaseVersion ${isReleaseVersion}"
            afterEvaluate {
                artifacts {
                    archives javadocJar, sourcesJar
                }

                signing {
                    required { isReleaseVersion() && gradle.taskGraph.hasTask("publish") }
                    sign publishing.publications.maven
                }
            }

            tasks.withType(Sign).configureEach {
                onlyIf { isReleaseVersion() }
            }
            //do not generate extra load on Nexus with new staging repository if signing fails
            tasks.withType(InitializeNexusStagingRepository).configureEach {
                shouldRunAfter(tasks.withType(Sign))
            }
        }
    }
}
